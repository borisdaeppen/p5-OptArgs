NAME
    OptArgs - integrated argument and option processing for Perl

VERSION
    0.0.1 Development release.

SYNOPSIS
        use OptArgs;

        opt quiet => (
            isa     => 'Bool',
            alias   => 'q',
            comment => 'be quiet please',
        );

        arg item => (
            isa     => 'Str',
            default => 1,
            comment => 'try this many times',
        );

        print "Working on: ". optargs->item ."\n"
            unless optargs->quiet;

DESCRIPTION
    optargs provides command-line option and argument processing for Perl
    scripts. It is designed to be a very simple way to write programs using
    a declarative style. Getopt::Long is used for the underlying parsing.

    How exactly does one define a command line application? optargs assumes
    a fairly common (but by no means universal) approach:

    Command
        The program name - i.e. the filename be executed by the shell.

    Options
        Options are parameters that affect the way a command runs. They are
        generally not required to be present, but that is configurable.
        Options are prefixed with '-' for single letter option names or '--'
        for long option names.

    Arguments
        Arguments are positional parameters that that a command needs know
        in order to do its work. Some arguments may be optional.

    Sub-commands
        A command may also have sub-commands with their own options and
        arguments. From the users point of view sub-commands and their
        options are indisinguishable from options and arguments to the main
        command, but from an implementation perspective they could (perhaps
        should) be separate, stand-alone programs, with possibly their own
        set of sub-commands.

  Declaring Options and Arguments
    optargs exports the following functions for defining Options and
    Arguments. The order in which they are defined also determines the order
    they appear in usage messages, and the order in which they are
    processed.

    opt name => ( %parameters )
        Define a Command Option with the following parameters:

        isa Required. Is mapped to a Getopt::Long type according to the
            following table:

                 optargs         Getopt::Long
                ------------------------------
                 'Bool'          '!'
                 'Counter'       '+'
                 'Str'           '=s'
                 'Int'           '=i'
                 'Num'           '=f'
                 'ArrayRef'      's@'
                 'HashRef'       's%'

        comment
            Required. Used to generate the usage/help message.

        default
            The value set when the option is not used.

            If this is a subroutine reference it will be called with a
            hashref containg all option/argument values after parsing the
            source has finished. The value to be set must be returned, and
            any changes to the hashref are ignored.

        alias
            Can be single characters or words separated by '|' if more than
            one alias is desired. If the option name contains underscores
            ('_') then an alias with '-' substitutions will be automatically
            added.

    arg name => ( %parameters )
        Define a Command Argument with the following parameters:

        isa Required. Is mapped to a Getopt::Long type according to the
            following table:

                 optargs         Getopt::Long
                ------------------------------
                 'Str'           '=s'
                 'Int'           '=i'
                 'Num'           '=f'
                 'ArrayRef'      's@'
                 'HashRef'       's%'

        comment
            Required. Used to generate the usage/help message.

        required
            Set to a true value when the caller must specify this argument.
            Can not be used if a 'default' is given.

        default
            The value set when the argument is not given. Can not be used if
            'required' is set.

            If this is a subroutine reference it will be called with a
            hashref containg all option/argument values after parsing the
            source has finished. The value to be set must be returned, and
            any changes to the hashref are ignored.

    Note that any call to opt() or arg() causes the next call to opts(),
    args() or optargs() (described below) to reset their values and reparse
    @ARGV, so you probably want to define all your options and arguments
    before retrieving their values.

  Parsing and Retrieving Values
    optargs exports the following functions for parsing and retriving option
    and argument values. They all parse @ARGV by default (or @argv when
    given) for options and arguments. An error / usage message will be
    generated if an invalid combination of options and arguments has been
    given.

    opts( [ @argv ] ) -> Blessed HashRef
        Return a hashref containing key/value pairs for the *options only*.
        The hashref is blessed into $caller::_opts and has accessor methods
        for each option.

    args( [ @argv ] ) -> Blessed HashRef
        Return a hashref containing key/value pairs for the *arguments
        only*. The hashref is blessed into $caller::_args and has accessor
        methods for each option.

    optargs( [ @argv ] ) -> Blessed HashRef
        Return a hashref containing key/value pairs for options and
        arguments *combined*. The hashref is blessed into $caller::_optargs
        and has accessor methods for each value.

    These function nearly behave like singletons: they will return the same
    hashref each time they are called unless @ARGV changes, a new @argv is
    given, or opt() or arg() are called.

  Utility Functions
    usage() -> Str
        Returns a usage string based on the defined opts and args. Can be
        called at any time.

SEE ALSO
    Getopt::Long

SUPPORT & DEVELOPMENT
    This distribution is managed via github:

        http://github.com/mlawren/optargs

    Code is tidied up on Git commit using githook-perltidy:

        http://github.com/mlawren/githook-perltidy

    Test coverage according to Devel::Cover is as follows:

        --------------------------------------------------------------
        File                  stmt  bran  cond   sub   pod  time total
        --------------------------------------------------------------
        blib/lib/optargs.pm   98.8  89.7 100.0 100.0 100.0  91.1  97.0
        lib/optargs.pod      100.0   n/a   n/a 100.0   n/a   8.9 100.0
        Total                 98.9  89.7 100.0 100.0 100.0 100.0  97.0
        --------------------------------------------------------------

AUTHOR
    Mark Lawrence <nomad@null.net>

LICENSE
    Copyright 2012 Mark Lawrence <nomad@null.net>

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 3 of the License, or (at your
    option) any later version.

